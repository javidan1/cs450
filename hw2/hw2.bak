#lang racket
#|
            #####################################################
            ###  PLEASE DO NOT DISTRIBUTE SOLUTIONS PUBLICLY  ###
            #####################################################

  Copy your solution of HW1 as file "hw1.rkt". The file should be in the same
  directory as "hw2.rkt" and "ast.rkt".
|#
(require "ast.rkt")
(require "hw1.rkt")
(require rackunit)
(provide (all-defined-out))
;; ^^^^^ DO NOT CHANGE ANY CODE ABOVE THIS LINE ^^^^^


;; Exercise 1.a: Counter
(define (counter accum grow) 'todo)

;; Exercise 1.b: Adder
(define (adder super) 'todo)

;; Exercise 2: Interperse
(define (intersperse l v) 'todo)

;; Exercise 3.a: Generic find
(define (find pred l) 'todo)

;; Exercise 3.b: Member using find
(define (member x l) 'todo)

;; Exercise 3.c: index-of using find
(define (index-of l x) 'todo)

;; Exercise 4: uncurry
(define (uncurry f) 'todo)

;; Exercise 5: Parse a quoted AST
(define (parse-ast node)
  (define (make-define-func node) 'todo)
  (define (make-define-basic node) 'todo)
  (define (make-lambda node) 'todo)
  (define (make-apply node) 'todo)
  (define (make-number node) 'todo)
  (define (make-variable node) 'todo)

  (cond
    [(define-basic? node) (make-define-basic node)]
    [(define-func? node) (make-define-func node)]
    [(symbol? node) (make-variable node)]
    [(real? node) (make-number node)]
    [(lambda? node) (make-lambda node)]
    [else (make-apply node)]))
